<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.message.admin.msg.dao.MsgReceDao">

	<sql id="commCols">
		id id,msg_id msgId,rece_sys_no receSysNo,rece_user_id receUserId,rece_time receTime,is_read isRead,read_time readTime
	</sql>

	<insert id="save" parameterType="msgRece" flushCache="true">
		 insert into msg_rece(id,msg_id,rece_sys_no,rece_user_id,rece_time,is_read,read_time)
		 values(#{id},#{msgId},#{receSysNo},#{receUserId},#{receTime},#{isRead},#{readTime})
	</insert>
	
	<delete id="delete" flushCache="true">
		delete from msg_rece
		<where>id=#{id}</where>
	</delete>
	
	<update id="update" parameterType="msgRece" flushCache="true">
		update msg_rece
		<set>
			msg_id=#{msgId},rece_user_id=#{receUserId},rece_time=#{receTime},is_read=#{isRead},read_time=#{readTime}
		</set>
		<where>id=#{id}</where>
	</update>
	<update id="updateIsRead" flushCache="true">
		update msg_rece
		<set>
			is_read=#{isRead},
			<choose>
			<when test="isRead==0">read_time=null</when>
			<otherwise>read_time=sysdate</otherwise>
			</choose>
		</set>
		<where>id=#{id}</where>
	</update>
	
	<select id="get" resultType="msgRece">
		select <include refid="commCols"/> from msg_rece
  		<where>id=#{id}</where>
	</select>
	<select id="getCountUnread" resultType="int">
		select count(*) from msg_rece
		<where>rece_sys_no=#{receSysNo} and rece_user_id=#{receUserId} and is_read=0</where>
	</select>
	<select id="getByMsgIdReceUserId" resultType="msgRece">
		select <include refid="commCols"/> from msg_rece
  		<where>msg_id=#{msgId} and rece_user_id=#{receUserId} and rownum=1</where>
	</select>
	
	<select id="findMsgRece" parameterType="msgRece" resultType="msgRece">
		select * from ( select a.*, rownum rn from (
		select <include refid="commCols"/> from msg_rece
		<where>
			<if test="name!=null and name!=''">and name like concat(concat('%', #{name}), '%')</if>
		</where>
		<choose>
		<when test="orderbys!=null and orderbys.size()>0">
			order by <foreach collection="orderbys" item="item" index="index" open="" separator="," close="">
				${item.property} ${item.type}
			</foreach>
		</when>
		<otherwise></otherwise>
		</choose>
		) a where rownum &lt;= #{orclEnd} ) where rn &gt;= #{orclBegin}
	</select>
	<select id="findMsgReceCount" parameterType="msgRece" resultType="int">
		select count(*) from msg_rece
		<where>
			<if test="name!=null and name!=''">and name like concat(concat('%', #{name}), '%')</if>
		</where>
	</select>
</mapper>